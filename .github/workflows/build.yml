name: Build IRC Server

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        compiler: [g++, clang++]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential clang make
        
    - name: Build project
      run: |
        # Debug information
        echo "=== Build Environment ==="
        echo "Current directory: $(pwd)"
        echo "Compiler: ${{ matrix.compiler }}"
        echo "Available files:"
        ls -la
        echo ""
        
        # Clean any existing build
        make clean || true
        
        # Ensure obj directory doesn't exist
        rm -rf obj
        
        # Build with specified compiler
        echo "=== Starting Build ==="
        make CC=${{ matrix.compiler }} || {
          echo "Build failed, trying without obj directory..."
          make clean
          make CC=${{ matrix.compiler }}
        }
        
    - name: Check executable
      run: |
        ls -la ircserv
        file ircserv
        echo "✅ Build completed successfully"
        
    - name: Basic functionality test
      run: |
        # Test if the server accepts the correct arguments
        timeout 2s ./ircserv 6667 testpass &
        sleep 1
        kill %1 2>/dev/null || true
        wait %1 2>/dev/null || true
        echo "✅ Server startup test passed"
        
    - name: Test error handling
      run: |
        # Test with wrong number of arguments
        if ./ircserv 2>&1 | grep -i "argument"; then
          echo "✅ Error handling test passed"
        else
          echo "❌ Error handling test failed"
          exit 1
        fi
        
    - name: Clean build artifacts
      run: make fclean
      
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install cppcheck
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck
        
    - name: Run static analysis
      run: |
        echo "=== Running Static Analysis ==="
        cppcheck --enable=warning,style,performance,portability \
          --std=c++98 --error-exitcode=0 \
          --suppress=missingIncludeSystem \
          --suppress=unusedFunction \
          *.cpp *.hpp 2>&1 | tee cppcheck-report.txt
        
        # Count warnings and errors
        WARNINGS=$(grep -c "warning:" cppcheck-report.txt || echo "0")
        ERRORS=$(grep -c "error:" cppcheck-report.txt || echo "0")
        
        echo "Static analysis complete:"
        echo "  Warnings: $WARNINGS"
        echo "  Errors: $ERRORS"
        
        if [ "$ERRORS" -gt "0" ]; then
          echo "❌ Static analysis found errors"
          exit 1
        else
          echo "✅ Static analysis passed"
        fi
        
  build-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Test C++98 compatibility
      run: |
        sudo apt-get update
        sudo apt-get install -y g++
        
        echo "=== Testing C++98 Compatibility ==="
        # Test compilation with strict C++98
        g++ -std=c++98 -Wall -Wextra -Werror -pedantic -c *.cpp
        echo "✅ C++98 compatibility test passed"
        
    - name: Build with optimization levels
      run: |
        echo "=== Testing Different Optimization Levels ==="
        
        # Test -O0 (no optimization)
        echo "Building with -O0..."
        make clean
        make CFLAGS="-Wall -Wextra -Werror -std=c++98 -O0"
        
        # Test -O2 (standard optimization)
        echo "Building with -O2..."
        make clean  
        make CFLAGS="-Wall -Wextra -Werror -std=c++98 -O2"
        
        echo "✅ All optimization levels build successfully"
